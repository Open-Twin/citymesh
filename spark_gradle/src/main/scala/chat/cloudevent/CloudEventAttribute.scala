// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package chat.cloudevent

@SerialVersionUID(0L)
final case class CloudEventAttribute(
    stand: _root_.scala.Predef.String = "",
    warnstufen: _root_.scala.Seq[chat.cloudevent.Warnstufen] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CloudEventAttribute] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = stand
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      warnstufen.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = stand
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      warnstufen.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withStand(__v: _root_.scala.Predef.String): CloudEventAttribute = copy(stand = __v)
    def clearWarnstufen = copy(warnstufen = _root_.scala.Seq.empty)
    def addWarnstufen(__vs: chat.cloudevent.Warnstufen*): CloudEventAttribute = addAllWarnstufen(__vs)
    def addAllWarnstufen(__vs: Iterable[chat.cloudevent.Warnstufen]): CloudEventAttribute = copy(warnstufen = warnstufen ++ __vs)
    def withWarnstufen(__v: _root_.scala.Seq[chat.cloudevent.Warnstufen]): CloudEventAttribute = copy(warnstufen = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = stand
          if (__t != "") __t else null
        }
        case 2 => warnstufen
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(stand)
        case 2 => _root_.scalapb.descriptors.PRepeated(warnstufen.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = chat.cloudevent.CloudEventAttribute
}

object CloudEventAttribute extends scalapb.GeneratedMessageCompanion[chat.cloudevent.CloudEventAttribute] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[chat.cloudevent.CloudEventAttribute] = this
  def merge(`_message__`: chat.cloudevent.CloudEventAttribute, `_input__`: _root_.com.google.protobuf.CodedInputStream): chat.cloudevent.CloudEventAttribute = {
    var __stand = `_message__`.stand
    val __warnstufen = (_root_.scala.collection.immutable.Vector.newBuilder[chat.cloudevent.Warnstufen] ++= `_message__`.warnstufen)
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __stand = _input__.readStringRequireUtf8()
        case 18 =>
          __warnstufen += _root_.scalapb.LiteParser.readMessage(_input__, chat.cloudevent.Warnstufen.defaultInstance)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    chat.cloudevent.CloudEventAttribute(
        stand = __stand,
        warnstufen = __warnstufen.result(),
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[chat.cloudevent.CloudEventAttribute] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      chat.cloudevent.CloudEventAttribute(
        stand = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        warnstufen = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[chat.cloudevent.Warnstufen]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CloudeventProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CloudeventProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = chat.cloudevent.Warnstufen
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = chat.cloudevent.CloudEventAttribute(
    stand = "",
    warnstufen = _root_.scala.Seq.empty
  )
  implicit class CloudEventAttributeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, chat.cloudevent.CloudEventAttribute]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, chat.cloudevent.CloudEventAttribute](_l) {
    def stand: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.stand)((c_, f_) => c_.copy(stand = f_))
    def warnstufen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[chat.cloudevent.Warnstufen]] = field(_.warnstufen)((c_, f_) => c_.copy(warnstufen = f_))
  }
  final val STAND_FIELD_NUMBER = 1
  final val WARNSTUFEN_FIELD_NUMBER = 2
  def of(
    stand: _root_.scala.Predef.String,
    warnstufen: _root_.scala.Seq[chat.cloudevent.Warnstufen]
  ): _root_.chat.cloudevent.CloudEventAttribute = _root_.chat.cloudevent.CloudEventAttribute(
    stand,
    warnstufen
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[chat.CloudEventAttribute])
}
