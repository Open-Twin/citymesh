// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package broker

/** @param idService
  *   Required Attributes
  * @param source
  *   URI-reference
  * @param idSidecar
  *   Attribute Extensions
  */
@SerialVersionUID(0L)
final case class CloudEvent(
    idService: _root_.scala.Predef.String = "",
    source: _root_.scala.Predef.String = "",
    specVersion: _root_.scala.Predef.String = "",
    `type`: _root_.scala.Predef.String = "",
    attributes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue] = _root_.scala.collection.immutable.Map.empty,
    data: broker.CloudEvent.Data = broker.CloudEvent.Data.Empty,
    idSidecar: _root_.scala.Predef.String = "",
    ipService: _root_.scala.Predef.String = "",
    ipSidecar: _root_.scala.Predef.String = "",
    timestamp: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CloudEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = idService
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = source
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = specVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = `type`
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      attributes.foreach { __item =>
        val __value = broker.CloudEvent._typemapper_attributes.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (data.binaryData.isDefined) {
        val __value = data.binaryData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(6, __value)
      };
      if (data.textData.isDefined) {
        val __value = data.textData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      };
      if (data.protoData.isDefined) {
        val __value = data.protoData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = idSidecar
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = ipService
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
        }
      };
      
      {
        val __value = ipSidecar
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
        }
      };
      
      {
        val __value = timestamp
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = idService
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = source
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = specVersion
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = `type`
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      attributes.foreach { __v =>
        val __m = broker.CloudEvent._typemapper_attributes.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.binaryData.foreach { __v =>
        val __m = __v
        _output__.writeBytes(6, __m)
      };
      data.textData.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      data.protoData.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = idSidecar
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = ipService
        if (!__v.isEmpty) {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = ipSidecar
        if (!__v.isEmpty) {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = timestamp
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withIdService(__v: _root_.scala.Predef.String): CloudEvent = copy(idService = __v)
    def withSource(__v: _root_.scala.Predef.String): CloudEvent = copy(source = __v)
    def withSpecVersion(__v: _root_.scala.Predef.String): CloudEvent = copy(specVersion = __v)
    def withType(__v: _root_.scala.Predef.String): CloudEvent = copy(`type` = __v)
    def clearAttributes = copy(attributes = _root_.scala.collection.immutable.Map.empty)
    def addAttributes(__vs: (_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)*): CloudEvent = addAllAttributes(__vs)
    def addAllAttributes(__vs: Iterable[(_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)]): CloudEvent = copy(attributes = attributes ++ __vs)
    def withAttributes(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue]): CloudEvent = copy(attributes = __v)
    def getBinaryData: _root_.com.google.protobuf.ByteString = data.binaryData.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withBinaryData(__v: _root_.com.google.protobuf.ByteString): CloudEvent = copy(data = broker.CloudEvent.Data.BinaryData(__v))
    def getTextData: _root_.scala.Predef.String = data.textData.getOrElse("")
    def withTextData(__v: _root_.scala.Predef.String): CloudEvent = copy(data = broker.CloudEvent.Data.TextData(__v))
    def getProtoData: broker.Any = data.protoData.getOrElse(broker.Any.defaultInstance)
    def withProtoData(__v: broker.Any): CloudEvent = copy(data = broker.CloudEvent.Data.ProtoData(__v))
    def withIdSidecar(__v: _root_.scala.Predef.String): CloudEvent = copy(idSidecar = __v)
    def withIpService(__v: _root_.scala.Predef.String): CloudEvent = copy(ipService = __v)
    def withIpSidecar(__v: _root_.scala.Predef.String): CloudEvent = copy(ipSidecar = __v)
    def withTimestamp(__v: _root_.scala.Predef.String): CloudEvent = copy(timestamp = __v)
    def clearData: CloudEvent = copy(data = broker.CloudEvent.Data.Empty)
    def withData(__v: broker.CloudEvent.Data): CloudEvent = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = idService
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = source
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = specVersion
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = `type`
          if (__t != "") __t else null
        }
        case 5 => attributes.iterator.map(broker.CloudEvent._typemapper_attributes.toBase).toSeq
        case 6 => data.binaryData.orNull
        case 7 => data.textData.orNull
        case 8 => data.protoData.orNull
        case 9 => {
          val __t = idSidecar
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = ipService
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = ipSidecar
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = timestamp
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(idService)
        case 2 => _root_.scalapb.descriptors.PString(source)
        case 3 => _root_.scalapb.descriptors.PString(specVersion)
        case 4 => _root_.scalapb.descriptors.PString(`type`)
        case 5 => _root_.scalapb.descriptors.PRepeated(attributes.iterator.map(broker.CloudEvent._typemapper_attributes.toBase(_).toPMessage).toVector)
        case 6 => data.binaryData.map(_root_.scalapb.descriptors.PByteString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => data.textData.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => data.protoData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PString(idSidecar)
        case 10 => _root_.scalapb.descriptors.PString(ipService)
        case 11 => _root_.scalapb.descriptors.PString(ipSidecar)
        case 12 => _root_.scalapb.descriptors.PString(timestamp)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = broker.CloudEvent
}

object CloudEvent extends scalapb.GeneratedMessageCompanion[broker.CloudEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[broker.CloudEvent] = this
  def merge(`_message__`: broker.CloudEvent, `_input__`: _root_.com.google.protobuf.CodedInputStream): broker.CloudEvent = {
    var __idService = `_message__`.idService
    var __source = `_message__`.source
    var __specVersion = `_message__`.specVersion
    var __type = `_message__`.`type`
    val __attributes = (_root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue] ++= `_message__`.attributes)
    var __idSidecar = `_message__`.idSidecar
    var __ipService = `_message__`.ipService
    var __ipSidecar = `_message__`.ipSidecar
    var __timestamp = `_message__`.timestamp
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var __data = `_message__`.data
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __idService = _input__.readStringRequireUtf8()
        case 18 =>
          __source = _input__.readStringRequireUtf8()
        case 26 =>
          __specVersion = _input__.readStringRequireUtf8()
        case 34 =>
          __type = _input__.readStringRequireUtf8()
        case 42 =>
          __attributes += broker.CloudEvent._typemapper_attributes.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, broker.CloudEvent.AttributesEntry.defaultInstance))
        case 50 =>
          __data = broker.CloudEvent.Data.BinaryData(_input__.readBytes())
        case 58 =>
          __data = broker.CloudEvent.Data.TextData(_input__.readStringRequireUtf8())
        case 66 =>
          __data = broker.CloudEvent.Data.ProtoData(_root_.scalapb.LiteParser.readMessage(_input__, _message__.data.protoData.getOrElse(broker.Any.defaultInstance)))
        case 74 =>
          __idSidecar = _input__.readStringRequireUtf8()
        case 82 =>
          __ipService = _input__.readStringRequireUtf8()
        case 90 =>
          __ipSidecar = _input__.readStringRequireUtf8()
        case 98 =>
          __timestamp = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    broker.CloudEvent(
        idService = __idService,
        source = __source,
        specVersion = __specVersion,
        `type` = __type,
        attributes = __attributes.result(),
        idSidecar = __idSidecar,
        ipService = __ipService,
        ipSidecar = __ipSidecar,
        timestamp = __timestamp,
        data = __data,
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[broker.CloudEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      broker.CloudEvent(
        idService = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        specVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        attributes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[broker.CloudEvent.AttributesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(broker.CloudEvent._typemapper_attributes.toCustom).toMap,
        idSidecar = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        ipService = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        ipSidecar = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(broker.CloudEvent.Data.BinaryData)
            .orElse[broker.CloudEvent.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(broker.CloudEvent.Data.TextData))
            .orElse[broker.CloudEvent.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[broker.Any]]).map(broker.CloudEvent.Data.ProtoData))
            .getOrElse(broker.CloudEvent.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BrokerProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BrokerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = broker.CloudEvent.AttributesEntry
      case 8 => __out = broker.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.broker.CloudEvent.AttributesEntry,
      _root_.broker.CloudEvent.CloudEventAttributeValue
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = broker.CloudEvent(
    idService = "",
    source = "",
    specVersion = "",
    `type` = "",
    attributes = _root_.scala.collection.immutable.Map.empty,
    idSidecar = "",
    ipService = "",
    ipSidecar = "",
    timestamp = "",
    data = broker.CloudEvent.Data.Empty
  )
  sealed trait Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBinaryData: _root_.scala.Boolean = false
    def isTextData: _root_.scala.Boolean = false
    def isProtoData: _root_.scala.Boolean = false
    def binaryData: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def textData: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def protoData: _root_.scala.Option[broker.Any] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends broker.CloudEvent.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BinaryData(value: _root_.com.google.protobuf.ByteString) extends broker.CloudEvent.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isBinaryData: _root_.scala.Boolean = true
      override def binaryData: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class TextData(value: _root_.scala.Predef.String) extends broker.CloudEvent.Data {
      type ValueType = _root_.scala.Predef.String
      override def isTextData: _root_.scala.Boolean = true
      override def textData: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class ProtoData(value: broker.Any) extends broker.CloudEvent.Data {
      type ValueType = broker.Any
      override def isProtoData: _root_.scala.Boolean = true
      override def protoData: _root_.scala.Option[broker.Any] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  @SerialVersionUID(0L)
  final case class AttributesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[broker.CloudEvent.CloudEventAttributeValue] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AttributesEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): AttributesEntry = copy(key = __v)
      def getValue: broker.CloudEvent.CloudEventAttributeValue = value.getOrElse(broker.CloudEvent.CloudEventAttributeValue.defaultInstance)
      def clearValue: AttributesEntry = copy(value = _root_.scala.None)
      def withValue(__v: broker.CloudEvent.CloudEventAttributeValue): AttributesEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = broker.CloudEvent.AttributesEntry
  }
  
  object AttributesEntry extends scalapb.GeneratedMessageCompanion[broker.CloudEvent.AttributesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[broker.CloudEvent.AttributesEntry] = this
    def merge(`_message__`: broker.CloudEvent.AttributesEntry, `_input__`: _root_.com.google.protobuf.CodedInputStream): broker.CloudEvent.AttributesEntry = {
      var __key = `_message__`.key
      var __value = `_message__`.value
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(broker.CloudEvent.CloudEventAttributeValue.defaultInstance)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      broker.CloudEvent.AttributesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[broker.CloudEvent.AttributesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        broker.CloudEvent.AttributesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[broker.CloudEvent.CloudEventAttributeValue]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = broker.CloudEvent.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = broker.CloudEvent.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = broker.CloudEvent.CloudEventAttributeValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = broker.CloudEvent.AttributesEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class AttributesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, broker.CloudEvent.AttributesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, broker.CloudEvent.AttributesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, broker.CloudEvent.CloudEventAttributeValue] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[broker.CloudEvent.CloudEventAttributeValue]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[broker.CloudEvent.AttributesEntry, (_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)] =
      _root_.scalapb.TypeMapper[broker.CloudEvent.AttributesEntry, (_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)](__m => (__m.key, __m.getValue))(__p => broker.CloudEvent.AttributesEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[broker.CloudEvent.CloudEventAttributeValue]
    ): _root_.broker.CloudEvent.AttributesEntry = _root_.broker.CloudEvent.AttributesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[CloudEvent.AttributesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CloudEventAttributeValue(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CloudEventAttributeValue] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = broker.CloudEvent.CloudEventAttributeValue
  }
  
  object CloudEventAttributeValue extends scalapb.GeneratedMessageCompanion[broker.CloudEvent.CloudEventAttributeValue] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[broker.CloudEvent.CloudEventAttributeValue] = this
    def merge(`_message__`: broker.CloudEvent.CloudEventAttributeValue, `_input__`: _root_.com.google.protobuf.CodedInputStream): broker.CloudEvent.CloudEventAttributeValue = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      broker.CloudEvent.CloudEventAttributeValue(
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[broker.CloudEvent.CloudEventAttributeValue] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        broker.CloudEvent.CloudEventAttributeValue(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = broker.CloudEvent.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = broker.CloudEvent.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = broker.CloudEvent.CloudEventAttributeValue(
    )
    implicit class CloudEventAttributeValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, broker.CloudEvent.CloudEventAttributeValue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, broker.CloudEvent.CloudEventAttributeValue](_l) {
    }
    def of(
    ): _root_.broker.CloudEvent.CloudEventAttributeValue = _root_.broker.CloudEvent.CloudEventAttributeValue(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[CloudEvent.CloudEventAttributeValue])
  }
  
  implicit class CloudEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, broker.CloudEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, broker.CloudEvent](_l) {
    def idService: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.idService)((c_, f_) => c_.copy(idService = f_))
    def source: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def specVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.specVersion)((c_, f_) => c_.copy(specVersion = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def attributes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
    def binaryData: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getBinaryData)((c_, f_) => c_.copy(data = broker.CloudEvent.Data.BinaryData(f_)))
    def textData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTextData)((c_, f_) => c_.copy(data = broker.CloudEvent.Data.TextData(f_)))
    def protoData: _root_.scalapb.lenses.Lens[UpperPB, broker.Any] = field(_.getProtoData)((c_, f_) => c_.copy(data = broker.CloudEvent.Data.ProtoData(f_)))
    def idSidecar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.idSidecar)((c_, f_) => c_.copy(idSidecar = f_))
    def ipService: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ipService)((c_, f_) => c_.copy(ipService = f_))
    def ipSidecar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ipSidecar)((c_, f_) => c_.copy(ipSidecar = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, broker.CloudEvent.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val IDSERVICE_FIELD_NUMBER = 1
  final val SOURCE_FIELD_NUMBER = 2
  final val SPEC_VERSION_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val ATTRIBUTES_FIELD_NUMBER = 5
  final val BINARY_DATA_FIELD_NUMBER = 6
  final val TEXT_DATA_FIELD_NUMBER = 7
  final val PROTO_DATA_FIELD_NUMBER = 8
  final val IDSIDECAR_FIELD_NUMBER = 9
  final val IPSERVICE_FIELD_NUMBER = 10
  final val IPSIDECAR_FIELD_NUMBER = 11
  final val TIMESTAMP_FIELD_NUMBER = 12
  @transient
  private val _typemapper_attributes: _root_.scalapb.TypeMapper[broker.CloudEvent.AttributesEntry, (_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)] = implicitly[_root_.scalapb.TypeMapper[broker.CloudEvent.AttributesEntry, (_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue)]]
  def of(
    idService: _root_.scala.Predef.String,
    source: _root_.scala.Predef.String,
    specVersion: _root_.scala.Predef.String,
    `type`: _root_.scala.Predef.String,
    attributes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, broker.CloudEvent.CloudEventAttributeValue],
    data: broker.CloudEvent.Data,
    idSidecar: _root_.scala.Predef.String,
    ipService: _root_.scala.Predef.String,
    ipSidecar: _root_.scala.Predef.String,
    timestamp: _root_.scala.Predef.String
  ): _root_.broker.CloudEvent = _root_.broker.CloudEvent(
    idService,
    source,
    specVersion,
    `type`,
    attributes,
    data,
    idSidecar,
    ipService,
    ipSidecar,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[CloudEvent])
}
